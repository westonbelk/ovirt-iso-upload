#!/usr/bin/env python3

import ovirtsdk4 as sdk
import getpass
import logging
import sys
import math
import json
import subprocess
import os
import time

import ssl
from six.moves.http_client import HTTPSConnection
from six.moves.urllib.parse import urlparse



def convert_size(size_bytes):
   if size_bytes == 0:
       return "0B"
   size_name = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
   i = int(math.floor(math.log(size_bytes, 1024)))
   p = math.pow(1024, i)
   s = round(size_bytes / p, 2)
   return "%s %s" % (s, size_name[i])



class DiskInfo:
    path = None
    name = None
    size = None
    qemu_info = None

    def is_iso(self):
        iso_byte_seq = b"\x01CD001\x01\x00"

        if self.qemu_info["format"] == "raw":
            with open(self.path, "rb") as f:
                f.seek(0x8000)
                primary_volume_descriptor = f.read(8)
                if primary_volume_descriptor == iso_byte_seq:
                    return True
                else:
                    logging.error("Invalid primary volume descriptor.")
        else:
            logging.error(f'Unsupported disk format {self.qemu_info["format"]}')
        return False

    def __init__(self, filename):
        self.path = filename
        self.name = os.path.basename(self.path)
        self.size = os.path.getsize(self.path)
        self.qemu_info = json.loads(subprocess.check_output(["qemu-img", "info", "--output", "json", self.path]))



def get_auth():
    """
    Authenticate within ovirt

    :returns: ovirt connection object
    """
    domain_prefix = "lab.cucyber.net"
    user = input(f"Username for user in domain [{domain_prefix}] ")
    ovirt_username = user + "@" + domain_prefix

    print(f"Authenticate for [{ovirt_username}]")
    ovirt_password = getpass.getpass()

    conn = sdk.Connection(
        url='https://architect.lab.cucyber.net/ovirt-engine/api',
        username=ovirt_username,
        password=ovirt_password,
        insecure=True
    )
    conn.test(raise_exception=True)
    logging.info("Connection test successful.")
    return conn



def list_disks(conn, search=None):
    """
    List the disks available within ovirt with an optional search parameter

    :param search: If set, search will find all disks that match this search
    :returns: List of all disks that match the search
    """
    disk_service = conn.system_service().disks_service()
    disks = disk_service.list(search=search)
    logging.debug(f'Search for "{search if search else ""}" returned {len(disks)} disks')
    return disks



def create_ovirt_disk(conn, disk_info):
    """
    Create and get the handle for a new disk in ovirt

    :param conn: ovirt connection
    :param disk_info: DiskInfo object describing the disk to create
    :returns: An ovirt disk handle representing the disk that was created in ovirt
    """
    disks_service = conn.system_service().disks_service()
    logging.info("Creating disk...")
    ovirt_disk = disks_service.add(
        disk = sdk.types.Disk(
            name=disk_info.name,
            content_type=sdk.types.DiskContentType.ISO,
            description="Uploaded Disk from Script",
            format=sdk.types.DiskFormat.RAW,
            initial_size=disk_info.size,
            provisioned_size=disk_info.qemu_info["virtual-size"],
            sparse=False,
            storage_domains=[sdk.types.StorageDomain(name="storage")]
        )
    )
    logging.debug(f"New Disk: {ovirt_disk.name} ({convert_size(ovirt_disk.provisioned_size)}) <{ovirt_disk.id}>")
    ovirt_disk_handle = disks_service.disk_service(ovirt_disk.id)
    return ovirt_disk_handle



def get_ovirt_disk(handle):
    """
    Block until the disk object pointed to by the handle is ready

    :param handle: ovirt disk handle
    :returns: The ovirt disk object pointed to by the handle
    """
    while True:
        time.sleep(1)
        ovirt_disk = handle.get()
        if ovirt_disk.status == sdk.types.DiskStatus.OK:
            logging.info("Finished creating new disk.")
            logging.debug("Disk status is OK.")
            return ovirt_disk



def create_ovirt_transfer(conn, disk_handle):
    """
    Create a new transfer session within ovirt using an existing disk.

    :param conn: ovirt connection
    :param disk_handle: The handle of the ovirt disk to create a transfer session to.
    """
    ovirt_disk = get_ovirt_disk(disk_handle)
    transfers_service = conn.system_service().image_transfers_service()
    logging.info("Creating transfer session...")
    transfer = transfers_service.add(
        sdk.types.ImageTransfer(
            image=sdk.types.Image(id=ovirt_disk.id)
        )
    )
    transfer_handle = transfers_service.image_transfer_service(transfer.id)
    return transfer_handle



def get_ovirt_transfer(handle):
    """
    Block until the transfer object pointed to by the handle is ready

    :param handle: ovirt transfer handle
    :returns: The ovirt transfer object pointed to by the handle
    """
    while True:
        time.sleep(1)
        transfer = handle.get()
        if transfer.phase != sdk.types.ImageTransferPhase.INITIALIZING:
            logging.debug("Transfer status is not INITIALIZING.")
            logging.info("Transfer session has been created.")
            return transfer



def create_upload_session(transfer_handle, disk_info):
    """
    Create a secure upload session using our https client

    :param transfer_handle: The ovirt transfer handle to upload to
    :param disk_info: A DiskInfo object representing the disk to be uploaded
    """
    t = get_ovirt_transfer(transfer_handle)
    if t.transfer_url is not None:
        dest_url = urlparse(t.transfer_url)
    else:
        logging.fatal("Direct upload not supported")
        sys.exit(1)
    
    logging.debug("Creating SSL context")
    context = ssl.create_default_context()
    context.load_verify_locations(cafile='ca.pem')
    
    logging.debug("Creating HTTPS connection")
    proxy_connection = HTTPSConnection(dest_url.hostname, dest_url.port, context=context)
    proxy_connection.putrequest("PUT", dest_url.path)
    proxy_connection.putheader('Content-Length', "%d" % (disk_info.size,) )
    proxy_connection.endheaders()
    return proxy_connection
   


def upload(disk_info, proxy_connection, transfer_handle):
    """
    Begin the upload to ovirt
    
    :param disk_info: A DiskInfo object representing the disk to be uploaded
    :param proxy_connection: The https connection we will use to upload the file
    :param transfer_handle: The ovirt transfer session handle that is being uploaded to
    :returns: None
    """
    logging.info("Starting upload...")
    BUF_SIZE = 1024 * 128
    # Start the upload
    # 
    # Params ( disk_info, proxy_connection, transfer_handle, 
    start = last_progress = time.time()
    
    with open(disk_info.path, "rb") as iso:
        pos = 0
        while pos < disk_info.size:
            # Send the next chunk to the proxy.
            to_read = min(disk_info.size - pos, BUF_SIZE)
            chunk = iso.read(to_read)
            if not chunk:
                transfer_handle.pause()
                raise RuntimeError("Unexpected end of file at pos=%d" % pos)

            proxy_connection.send(chunk)
            pos += len(chunk)
            now = time.time()

            # Report progress every second
            if now - last_progress > 1:
                upload_progress = (float(pos) / disk_info.size * 100)
                print(f"Upload Status [{upload_progress:.2f}%]", end="\r")
                last_progress = now

    # Get the response
    response = proxy_connection.getresponse()
    if response.status != 200:
        transfer_handle.pause()
        logging.error(f"Upload failed: {response.status} {response.reason}")
        sys.exit(1)

    elapsed = time.time() - start
    
    logging.info("Upload complete.")
    logging.info(f"Uploaded {convert_size(disk_info.size)} in {elapsed:.2f} seconds")



def main():
    storage_domain = "storage"
    
    # Get information about the disk 
    disk_info = DiskInfo(sys.argv[1])
    if not disk_info.is_iso():
        logging.fatal(f"Disk is not in iso format. Exiting.")
        sys.exit(1)
    
    # Authenticate with ovirt
    conn = get_auth()

    # Check if the disk we're trying to upload already exists on the remote server
    existing_disks = list_disks(conn, search=disk_info.name)
    if existing_disks:
        logging.error(f"ISO name {disk_info.name} already exists at the following locations:")
        for d in existing_disks:
            print(f"{d.name} ({convert_size(d.provisioned_size)}) <{d.id}>")
        print()
    

    # Preallocate a disk within ovirt
    disk_handle = create_ovirt_disk(conn, disk_info)

    # Create a transfer handler within ovirt
    transfer_handle = create_ovirt_transfer(conn, disk_handle)

    # Prepare our https upload connection with ovirt
    proxy_connection = create_upload_session(transfer_handle, disk_info)
    
    # Upload the disk
    upload(disk_info, proxy_connection, transfer_handle)
    
    # Cleanup
    logging.info("Finalizing transfer session...")
    transfer_handle.finalize()
    conn.close()
    proxy_connection.close()



if __name__ == "__main__":
    logging.basicConfig(stream=sys.stdout, level=logging.DEBUG, format="[%(levelname)s] %(message)s")
    main()
